{
	"name": "Dataflow_ArtistInfoCompilation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ArtistLicensingRatesTable",
						"type": "DatasetReference"
					},
					"name": "artistLicensingRates"
				},
				{
					"dataset": {
						"referenceName": "artistTicketSales",
						"type": "DatasetReference"
					},
					"name": "artistTicketSales"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AugmentedArtistInfo",
						"type": "DatasetReference"
					},
					"name": "writeToDataLake"
				}
			],
			"transformations": [
				{
					"name": "addArtistInfo"
				},
				{
					"name": "removeArtistID",
					"description": "Autogenerated by data preview actions"
				}
			],
			"script": "source(output(\n\t\tArtistID as integer,\n\t\tArtistName as string,\n\t\tRate as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> artistLicensingRates\nsource(output(\n\t\tArtistName as string,\n\t\tticketSalesDollars as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> artistTicketSales\nartistLicensingRates, artistTicketSales lookup(artistLicensingRates@ArtistName == artistTicketSales@ArtistName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> addArtistInfo\naddArtistInfo select(mapColumn(\n\t\tArtistName = artistLicensingRates@ArtistName,\n\t\tRate,\n\t\tArtistName = artistTicketSales@ArtistName,\n\t\tticketSalesDollars\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> removeArtistID\nremoveArtistID sink(input(\n\t\tUserID as string,\n\t\tArtist as string,\n\t\tPlays as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['augmentedArtistInfo.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> writeToDataLake"
		}
	}
}