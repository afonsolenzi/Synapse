{
	"name": "D1_SQLOD_MusicService",
	"properties": {
		"folder": {
			"name": "Music Service"
		},
		"content": {
			"query": "-- required to create credentials\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = '******'\nGO\n\n-- create a credential that uses the Serverless engine managed identity\nCREATE DATABASE SCOPED CREDENTIAL [SynapseIdentity]\nWITH IDENTITY = 'Managed Identity';\nGO\n\n-- create a read-only account to use later on\nuse master\nCREATE LOGIN [reader] with password='************';\n\nuse demos \nCREATE USER [reader] FROM LOGIN [reader];\n\nalter role db_datareader \nAdd member [reader] \n\n-- now create other reference objects\n\n-- the external data source points to the Azure Data Lake folder\nCREATE EXTERNAL DATA SOURCE synapse\nWITH (    LOCATION   = 'https://warnerdatalake.dfs.core.windows.net/synapse',\n          CREDENTIAL = [SynapseIdentity] \n)\nGO\n\n-- a file format for pipe delimited files\nCREATE EXTERNAL FILE FORMAT PipeDelimitedWithNoHeaderFormat\nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS ( FIELD_TERMINATOR = '|')\n);\nGO\n\n-- a file format for CSV with header\nCREATE EXTERNAL FILE FORMAT CommaDelimitedWithHeaderFormat\nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS ( FIELD_TERMINATOR = ',', FIRST_ROW=2)\n);\nGO\n\n-- a PARQUET file format\nCREATE EXTERNAL FILE FORMAT [ParquetFF] WITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\nGO\n\n-- reference artist list stored in ADLS\nCREATE EXTERNAL TABLE [dbo].artistList\n(\n    [ArtistName] [varchar](100)\n)\nWITH (DATA_SOURCE = synapse,LOCATION = N'/musicdata/ArtistList.csv',FILE_FORMAT = [CommaDelimitedWithHeaderFormat]);\nGO\n\nSELECT TOP 10 * FROM dbo.artistList;\n\n-- temp tables are pretty useless\nCREATE TABLE #artist_list\n(\n   [ArtistName] [varchar](100)\n);\n\nINSERT INTO #artist_list(ArtistName)\nVALUES('dummyArtist');\n\nSELECT * FROM #artist_list;\n\nINSERT INTO #artist_list\nSELECT TOP 10 * FROM dbo.artistList;\n\nSELECT * FROM #artist_list;\nGO;\n\n-- create external table on top of parquet\nCREATE EXTERNAL TABLE [dbo].[userArtistPlays]\n(\n    [UserID] varchar(100),\n\t[Artist] varchar(100),\n\t[Plays] int,\n\t[sourceFile] varchar(300)\n)\nWITH (DATA_SOURCE=synapse,LOCATION = N'/musicdata/userartistplays.parquet',FILE_FORMAT = [ParquetFF]);\nGO\n\nSELECT count(1) FROM dbo.userArtistPlays;\n\n-- note the messages tab details\nselect top 10 sum(Plays) totalPlays, Artist,[UserID]\nFROM dbo.userArtistPlays\ngroup by Artist,[UserID]\norder by totalPlays desc;\n\n-- get external table metadata\nSELECT * FROM sys.external_tables;\n\n-- instead of EXTERNAL TABLES, exploration use case can be enabled easily through OPENROWSET\n\n-- either with absolute URL\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/augmentedArtistInfo.parquet',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- or with relative URL\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK '/musicdata/augmentedArtistInfo.parquet',\n        DATA_SOURCE='synapse',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n\n-- check the collation (SQL_Latin1_General_CP1_CI_AS is the default)\nSELECT DATABASEPROPERTYEX(DB_NAME(), 'Collation') AS Collation;\n\nALTER DATABASE demos \nCOLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8;\n\n-- reset \nALTER DATABASE demos \nCOLLATE SQL_Latin1_General_CP1_CI_AS;\n\n-- what are the inferred data types?\nEXEC sp_describe_first_result_set N'\n\tSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/augmentedArtistInfo.parquet'',\n        FORMAT=''PARQUET''\n    ) AS [result]';\n\n-- specify better types if you want\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/augmentedArtistInfo.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (\n\t\tArtistName varchar(100) COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8, -- we used length of 100 instead of the inferred 8000\n\t\tRate int,\n\t\tticketSalesDollars int\n\t) AS [result];\n\n-- CSV also offers 2 parser versions\n-- when possible use version 2.0\nSELECT\n     top 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetails.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        HEADER_ROW=TRUE\n    ) AS [result];\n\n-- version 1.0 is more cumbersome since it requires schema definition\n-- but offers some features like support for Gzip\nSELECT\n     top 1 *\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetails.csv.gz',\n        FORMAT='CSV',\n        DATA_COMPRESSION = 'GZIP',\n        PARSER_VERSION='1.0',\n        FIRSTROW=2\n    )\n    WITH (\n    [UserID] VARCHAR (100),\n    [Gender] VARCHAR(2),\n    Age int,\n    Country VARCHAR(100),\n    SignupString VARCHAR(20)\n) AS [result];\n\n-- let's read some json\n\n-- read the file flat\nSELECT \n    jsonContent\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetailsSmall.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result];\n\n-- pick out fields\n-- OPENJSON once to move into the array then another OPENJSON to select one level inside the array\nSELECT TOP 100\n   urows.*\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetails.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]  \n    CROSS APPLY OPENJSON(jsonContent)\n    WITH(Users nvarchar(max) '$.ServiceUsers' as JSON) as ujson\n    CROSS APPLY OPENJSON(ujson.Users) urows;\n\n-- flattened out with standard openjson output\nSELECT TOP 100\n   uvalues.*\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetails.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]  \n    CROSS APPLY OPENJSON(jsonContent)\n    WITH(Users nvarchar(max) '$.ServiceUsers' as JSON) as ujson\n    CROSS APPLY OPENJSON(ujson.Users) urows\n    CROSS APPLY OPENJSON(urows.value) uvalues;\n\n-- with proper columns\nSELECT TOP 100\n   uvalues.*\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/UserDetails.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]  \n    CROSS APPLY OPENJSON(jsonContent)\n    WITH(Users nvarchar(max) '$.ServiceUsers' as JSON) as ujson\n    CROSS APPLY OPENJSON(ujson.Users) urows\n    CROSS APPLY OPENJSON(urows.value)\n    WITH\n    (\n        UserID varchar(200) '$.UserID',\n        Gender varchar(2) '$.Gender',\n        Age int '$.Age',\n        Country varchar(50) '$.Country',\n        SignupString varchar(20) '$.SignupString'\n    ) uvalues;\n\n\n-- including parquet JSON for example\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/userdetailsnested.parquet',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- to normalize it...\nSELECT\n    TOP 100 [result].UserID,Properties.*\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/userdetailsnested.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\nCROSS APPLY OPENJSON([result].JsonProps,'$[0]') \nWITH (\n    Gender VARCHAR(200) N'$.Gender',\n    Age int N'$.Age',\n    Country VARCHAR(200) N'$.Country',\n    SignupString Date N'$.SignupString'\n  ) AS Properties\nWHERE Country = N'Germany' -- notice I can pass a filter here\nORDER BY Age DESC;\n\n\n-- alternative way to access properties without making them part of the structured output\n-- for example, if you are interested in top level properties but want to filter on a deep nested property\nSELECT\n    TOP 100 [result].UserID,Properties.*\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/userdetailsnested.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\nCROSS APPLY OPENJSON([result].JsonProps,'$[0]') \nWITH (\n    Gender VARCHAR(200) N'$.Gender',\n    Age int N'$.Age',\n    Country VARCHAR(200) N'$.Country',\n    SignupString Date N'$.SignupString'\n  ) AS Properties\nWHERE JSON_VALUE([result].JsonProps,'$[0].Country') = N'Canada';\n\n-- and what about XML!?!? (there is none!!)\n\n\n-- you can create views over External Tables\nCREATE EXTERNAL TABLE augmentedArtistInformation (\n\t[ArtistName] varchar(100),\n\t[Rate] int,\n\t[ticketSalesDollars] int,\n\t[RecordLabel] varchar(100)\n\t)\n\tWITH (\n\tLOCATION = 'musicdata/augmentedArtistInfo.parquet',\n\tDATA_SOURCE = synapse,\n\tFILE_FORMAT = [ParquetFF]\n\t);\n\nCREATE OR ALTER VIEW FullArtistProfile\nAS\nSELECT af.ArtistName, af.Rate as LicensingRate, af.TicketSalesDollars\nFROM augmentedArtistInformation af;\n\n-- show that it works\nselect top 10 * from FullArtistProfile;\n\n-- you can materialize the view as an external table too (it's a snapshot!)\n-- instead of CTAS it's CETAS\nCREATE EXTERNAL TABLE FullArtistProfileNov2020\nWITH (\n        LOCATION = N'musicdata/fullartistprofile/2020/November/',\n        DATA_SOURCE = synapse,\n        FILE_FORMAT = ParquetFF\n) AS\nSELECT f.*,'November' as [Month], 2020 as [Year] FROM FullArtistProfile f;\n\nCREATE EXTERNAL TABLE FullArtistProfileDec2020\nWITH (\n        LOCATION = N'musicdata/fullartistprofile/2020/December/',\n        DATA_SOURCE = synapse,\n        FILE_FORMAT = ParquetFF\n) AS\nSELECT f.*,'December' as [Month], 2020 as [Year] FROM FullArtistProfile f;\n\nCREATE EXTERNAL TABLE FullArtistProfileJan2021\nWITH (\n        LOCATION = N'musicdata/fullartistprofile/2021/January/',\n        DATA_SOURCE = synapse,\n        FILE_FORMAT = ParquetFF\n) AS\nSELECT f.*,'January' as [Month], 2021 as [Year] FROM FullArtistProfile f;\n\n-- lots of flexibility when dealing with this type of folder structure\n-- read contents of folder\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/2020/November/',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- read contents of parent folder (this will fail!!)\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/2020/',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- needs to be recursive\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/2020/**',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- wildcards can be at different levels\nSELECT\n    count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/*/November/',\n        FORMAT='PARQUET'\n    ) AS [result];\n\n-- you can get the filename that belongs to the rows\nSELECT [result].filename() [filename],\n    count(*) as [rows]\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/*/November/',\n        FORMAT='PARQUET'\n    ) AS [result]\nGROUP BY [result].filename();\n\n-- you can use the filepath to extract more information (partitioning)\nSELECT [result].filepath(1) as [year],[result].filepath(2) as [Month],\n    count(*) as [rows]\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/*/*/',\n        FORMAT='PARQUET'\n    ) AS [result]\nGROUP BY [result].filepath(1),[result].filepath(2);\n\n-- filter at any level using this pattern\n\nSELECT [result].filepath(1) as [year],[result].filepath(2) as [Month],\n    count(*) as [rows]\nFROM\n    OPENROWSET(\n        BULK 'https://warnerdatalake.dfs.core.windows.net/synapse/musicdata/fullartistprofile/*/*/',\n        FORMAT='PARQUET'\n    ) AS [result]\nWHERE [result].filepath(1)='2020'\nGROUP BY [result].filepath(1),[result].filepath(2);\n\n-- but what happens with an external table?\nCREATE EXTERNAL TABLE [dbo].[fullArtistProfileHistorical]\n(\n    ArtistName varchar(100),\n\tLicensingRate int,\n\tTicketSalesDollars int,\n\tSongPlays bigint,\n    [Month] varchar(20),\n    [Year] int\n)\nWITH (DATA_SOURCE=synapse,LOCATION = N'/musicdata/fullartistprofile/*/*/*.parquet',FILE_FORMAT = [ParquetFF]);\nGO\n\n-- the execution engine does not do partitioning at this point\nselect count(*) from fullArtistProfileHistorical;\n\nselect count(*) from fullArtistProfileHistorical\nwhere [Month]='January' and [Year]=2021;\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"poolName": "Built-in",
				"databaseName": "demos"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}