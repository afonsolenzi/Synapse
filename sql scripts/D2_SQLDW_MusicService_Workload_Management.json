{
	"name": "D2_SQLDW_MusicService_Workload_Management",
	"properties": {
		"folder": {
			"name": "Music Service"
		},
		"content": {
			"query": "-- Monitor the Pool\n\n-- what are the nodes in my pool?\nSELECT [type], COUNT(*) node_count FROM sys.dm_pdw_nodes\nGROUP BY [type];\n\n-- How many schedulers (cores) per Node?\nSELECT pdw_node_id PoolNode, parent_node_id NumaNode, count(*) Schedulers\nFROM sys.dm_pdw_nodes_os_schedulers\nwhere status='VISIBLE ONLINE'\ngroup by pdw_node_id, parent_node_id;\n\n-- How many threads?\nSELECT nds.pdw_node_id,nds.[type], COUNT(*)threadCount\nFROM sys.dm_pdw_nodes nds\nINNER JOIN sys.dm_pdw_os_threads thrs\nON nds.pdw_node_id=thrs.pdw_node_id\nGROUP BY nds.pdw_node_id,nds.[type];\n\n\n-- Looking at memory consumption\nSELECT\n  pc1.cntr_value as Curr_Mem_KB,\n  pc1.cntr_value/1024.0 as Curr_Mem_MB,\n  (pc1.cntr_value/1048576.0) as Curr_Mem_GB,\n  pc2.cntr_value as Max_Mem_KB,\n  pc2.cntr_value/1024.0 as Max_Mem_MB,\n  (pc2.cntr_value/1048576.0) as Max_Mem_GB,\n  pc1.cntr_value * 100.0/pc2.cntr_value AS Memory_Utilization_Percentage,\n  pc1.pdw_node_id\nFROM\n-- pc1: current memory\nsys.dm_pdw_nodes_os_performance_counters AS pc1\n-- pc2: total memory allowed for this SQL instance\nJOIN sys.dm_pdw_nodes_os_performance_counters AS pc2\nON pc1.object_name = pc2.object_name AND pc1.pdw_node_id = pc2.pdw_node_id\nWHERE\npc1.counter_name = 'Total Server Memory (KB)'\nAND pc2.counter_name = 'Target Server Memory (KB)';\n\n-- monitor log consumption\nSELECT\n  instance_name as distribution_db,\n  cntr_value*1.0/1048576 as log_file_size_used_GB,\n  pdw_node_id\nFROM sys.dm_pdw_nodes_os_performance_counters\nWHERE\ninstance_name like 'Distribution_%'\nAND counter_name = 'Log File(s) Used Size (KB)'\norder by log_file_size_used_GB DESC;\n\n\n-- monitor tempdb\nSELECT TOP 20\n    sr.request_id,\n    ssu.session_id,\n    ssu.pdw_node_id,\n    sr.command,\n    sr.total_elapsed_time,\n    es.login_name AS 'LoginName',\n    DB_NAME(ssu.database_id) AS 'DatabaseName',\n    (es.memory_usage * 8) AS 'MemoryUsage (in KB)',\n    (ssu.user_objects_alloc_page_count * 8) AS 'Space Allocated For User Objects (in KB)',\n    (ssu.user_objects_dealloc_page_count * 8) AS 'Space Deallocated For User Objects (in KB)',\n    (ssu.internal_objects_alloc_page_count * 8) AS 'Space Allocated For Internal Objects (in KB)',\n    (ssu.internal_objects_dealloc_page_count * 8) AS 'Space Deallocated For Internal Objects (in KB)',\n    CASE es.is_user_process\n    WHEN 1 THEN 'User Session'\n    WHEN 0 THEN 'System Session'\n    END AS 'SessionType',\n    es.row_count AS 'RowCount'\nFROM sys.dm_pdw_nodes_db_session_space_usage AS ssu\n    INNER JOIN sys.dm_pdw_nodes_exec_sessions AS es ON ssu.session_id = es.session_id AND ssu.pdw_node_id = es.pdw_node_id\n    INNER JOIN sys.dm_pdw_nodes_exec_connections AS er ON ssu.session_id = er.session_id AND ssu.pdw_node_id = er.pdw_node_id\n    INNER JOIN (\nSELECT\n\t\tsr.request_id,\n\t\tsr.step_index,\n\t\t(CASE WHEN (sr.distribution_id = -1 ) THEN (SELECT pdw_node_id FROM sys.dm_pdw_nodes WHERE type = 'CONTROL') ELSE d.pdw_node_id END) AS pdw_node_id,\n\t\tsr.distribution_id,\n\t\tsr.status,\n\t\tsr.error_id,\n\t\tsr.start_time,\n\t\tsr.end_time,\n\t\tsr.total_elapsed_time,\n\t\tsr.row_count,\n\t\tsr.spid,\n\t\tsr.command\n\tFROM\n\t\tsys.pdw_distributions AS d\n\t\tRIGHT JOIN sys.dm_pdw_sql_requests AS sr ON d.distribution_id = sr.distribution_id\n) AS sr ON ssu.session_id = sr.spid AND ssu.pdw_node_id = sr.pdw_node_id\nWHERE DB_NAME(ssu.database_id) = 'tempdb'\n    AND es.session_id <> @@SPID\n    AND es.login_name <> 'sa'\nORDER BY 'MemoryUsage (in KB)' DESC;\n\n\n-- Working with the Resource Manager\n\n-- let's setup a user to limit through the resource manager\n\n--use master\nIF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = 'reportingApp')\nBEGIN\nCREATE LOGIN [reportingApp] WITH PASSWORD='*******'\nEND\n;\n\n-- back to SQLDW\n\nIF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'reportingApp')\nBEGIN\nCREATE USER [reportingApp] FOR LOGIN [reportingApp]\nEND\n;\n\nsp_addrolemember 'db_datareader', 'reportingApp';\n\n-- list the built-in resource classes (besides smallrc)\nSELECT name\nFROM   sys.database_principals\nWHERE  name LIKE '%rc%' AND type_desc = 'DATABASE_ROLE';\n\n-- definitions here: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/resource-classes-for-workload-management\n\n-- create a classifier\n-- DROP WORKLOAD CLASSIFIER [reportingClassifier];\nCREATE WORKLOAD CLASSIFIER [reportingClassifier]\nWITH (WORKLOAD_GROUP = 'largerc'\n      ,MEMBERNAME = 'reportingApp'\n      ,IMPORTANCE = HIGH);\n\n/*\nPRECEDENCE:\nClassifier Parameter\tWeight\nMEMBERNAME:USER\t64\nMEMBERNAME:ROLE\t32\nWLM_LABEL\t16\nWLM_CONTEXT\t8\nSTART_TIME/END_TIME\t4\n*/\n\n-- view classifiers and groups\nSELECT * FROM sys.workload_management_workload_classifiers;\nSELECT * FROM sys.workload_management_workload_classifier_details;\nSELECT * FROM sys.workload_management_workload_groups;\nSELECT * FROM sys.dm_workload_management_workload_groups_stats;\n\n-- run a query then check classification (from here and from ADS with reportingapp)\nSELECT TOP 10 ua.Artist, Rate, SUM(Plays) AllPlays,[Age]\nFROM musicService.ArtistRates ar JOIN musicService.UserArtistPlays ua ON ar.ArtistName = ua.Artist\nJOIN musicService.UserDetails ud ON ua.UserID=ud.[UserID]\nWHERE ud.Age BETWEEN 30 and 40 \nGROUP BY ua.Artist,ar.Rate,ud.Age\nORDER BY AllPlays DESC\nOPTION(LABEL='Top Artists for Users 30-40 - Resources');\n\n-- verify the classification\nSELECT *\nFROM sys.dm_pdw_exec_requests r \nWHERE r.[label] = 'Top Artists for Users 30-40 - Resources'\norder by r.start_time desc;\n\n-- if needed create a detailed workload group of your own\nCREATE WORKLOAD GROUP ReportingWorkload\nWITH ( MIN_PERCENTAGE_RESOURCE = 20\n      ,CAP_PERCENTAGE_RESOURCE = 80\n      ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 5\n      ,IMPORTANCE= ABOVE_NORMAL\n      ,QUERY_EXECUTION_TIMEOUT_SEC=600)\n;\n-- concurrency table: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/memory-concurrency-limits\n\n\n-- drop original classifier\nDROP WORKLOAD CLASSIFIER [reportingClassifier];\n\n-- recreate with new workload group (not the built-in one)\nCREATE WORKLOAD CLASSIFIER [reportingClassifier]\nWITH (WORKLOAD_GROUP = 'ReportingWorkload'\n      ,MEMBERNAME = 'reportingApp');\n-- rerun the query and verify the new group allocation\n\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"poolName": "SQLDW",
				"databaseName": "SQLDW"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}